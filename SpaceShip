# program template for Spaceship
import simplegui
import math
import random

# globals for user interface
WIDTH = 800
HEIGHT = 600
score = 0
lives = 3
time = 0
# Friction contant should be less than 1
FRICTION_CONST = .02
ANGULAR_VELOCITY_CONST=.2
THRUST_CONST=.2
MISSILE_CONST=5
ROCK_NUMBER = 12
started = False

class ImageInfo:
    def __init__(self, center, size, radius = 0, lifespan = None, animated = False):
        self.center = center
        self.size = size
        self.radius = radius
        if lifespan:
            self.lifespan = lifespan
        else:
            self.lifespan = float('inf')
        self.animated = animated

    def get_center(self):
        return self.center

    def get_size(self):
        return self.size

    def get_radius(self):
        return self.radius

    def get_lifespan(self):
        return self.lifespan

    def get_animated(self):
        return self.animated

    
# art assets created by Kim Lathrop, may be freely re-used in non-commercial projects, please credit Kim
    
# debris images - debris1_brown.png, debris2_brown.png, debris3_brown.png, debris4_brown.png
#                 debris1_blue.png, debris2_blue.png, debris3_blue.png, debris4_blue.png, debris_blend.png
debris_info = ImageInfo([320, 240], [640, 480])
debris_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/debris2_blue.png")

# nebula images - nebula_brown.png, nebula_blue.png
nebula_info = ImageInfo([400, 300], [800, 600])
nebula_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/nebula_blue.f2014.png")

# splash image
splash_info = ImageInfo([200, 150], [400, 300])
splash_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/splash.png")

# ship image
ship_info = ImageInfo([45, 45], [90, 90], 35)
ship_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/double_ship.png")

# missile image - shot1.png, shot2.png, shot3.png
missile_info = ImageInfo([5,5], [10, 10], 3, 50)
missile_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/shot1.png")

# asteroid images - asteroid_blue.png, asteroid_brown.png, asteroid_blend.png
asteroid_info = ImageInfo([45, 45], [90, 90], 40)
asteroid_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/asteroid_blue.png")

# animated explosion - explosion_orange.png, explosion_blue.png, explosion_blue2.png, explosion_alpha.png
explosion_info = ImageInfo([64, 64], [128, 128], 17, 24, True)
explosion_image = simplegui.load_image("http://commondatastorage.googleapis.com/codeskulptor-assets/lathrop/explosion_alpha.png")

# sound assets purchased from sounddogs.com, please do not redistribute
soundtrack = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/soundtrack.mp3")
missile_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/missile.mp3")
missile_sound.set_volume(.5)
ship_thrust_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/thrust.mp3")
explosion_sound = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/sounddogs/explosion.mp3")

# alternative upbeat soundtrack by composer and former IIPP student Emiel Stopler
# please do not redistribute without permission from Emiel at http://www.filmcomposer.nl
#soundtrack = simplegui.load_sound("https://storage.googleapis.com/codeskulptor-assets/ricerocks_theme.mp3")

# helper functions to handle transformations
def angle_to_vector(ang):
    return [math.cos(ang), math.sin(ang)]

def dist(p,q):
    return math.sqrt((p[0] - q[0]) ** 2+(p[1] - q[1]) ** 2)

def degree_to_radians(angle_degree):
    return (math.pi*angle_degree)/180

# Ship class
class Ship:
    def __init__(self, pos, vel, angle, image, info):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.thrust = False
        # angle in radian
        self.angle = angle
        self.angle_vel = 0
        self.image = image
        self.image_center = info.get_center()
        self.image_center
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        
    def draw(self,canvas):
        if self.thrust:
            thrust_image_center = [self.image_center[0]+(self.image_size[0]),
                                   self.image_center[1]]
            canvas.draw_image(self.image, thrust_image_center, 
                            self.image_size, self.pos, 
                            self.image_size, 
                            self.angle)
        else:
            canvas.draw_image(self.image, self.image_center, 
                            self.image_size, self.pos, 
                            self.image_size, 
                            self.angle)

    def set_thrust(self, thrust):
        self.thrust = thrust
        if self.thrust:
            ship_thrust_sound.play()
        else:
            ship_thrust_sound.rewind()
        
    def set_angular_velocity(self, angular_velocity_modifier):
        self.angle_vel += angular_velocity_modifier
    
    def get_radius(self):
        return self.radius
    
    def get_position(self):
        return self.pos

    def shoot(self):
        global missile_info, missile_sound, missile_group
        orient = angle_to_vector(self.angle)
        missile_pos_x=self.pos[0]+orient[0]*self.radius
        missile_pos_y=self.pos[1]+orient[1]*self.radius
        missile_velocity_x = self.vel[0] + orient[0]*MISSILE_CONST
        missile_velocity_y = self.vel[1] + orient[1]*MISSILE_CONST            
        a_missile = Sprite([missile_pos_x,missile_pos_y], 
                           [missile_velocity_x,missile_velocity_y],
                           self.angle, 0, missile_image, missile_info, missile_sound)
        missile_group.add(a_missile)

        
    def update(self):
        # update pos
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
                   
        # update angle angle will be between 0 - 2pie
        #self.angle = (self.angle + self.angle_vel) % (2*math.pi)
        self.angle += self.angle_vel
        
        # update velocity with friction
        self.vel[0] *= (1-FRICTION_CONST)
        self.vel[1] *= (1-FRICTION_CONST)
        #if thrust increase velocity
        if self.thrust:
            orient = angle_to_vector(self.angle)
            self.vel[0] += orient[0]*THRUST_CONST
            self.vel[1] += orient[1]*THRUST_CONST                
    
# Sprite class
class Sprite:
    def __init__(self, pos, vel, ang, ang_vel, image, info, sound = None):
        self.pos = [pos[0],pos[1]]
        self.vel = [vel[0],vel[1]]
        self.angle = ang
        self.angle_vel = ang_vel
        self.image = image
        self.image_center = info.get_center()
        self.image_size = info.get_size()
        self.radius = info.get_radius()
        self.lifespan = info.get_lifespan()
        self.animated = info.get_animated()
        self.age = 0
        if sound:
            sound.rewind()
            sound.play()
   
    def draw(self, canvas):
        global time
        if self.animated:
            explosion_index = time % 24
            canvas.draw_image(explosion_image, [explosion_info.get_center()[0] + explosion_index * explosion_info.get_size()[0],
                                               explosion_info.get_center()[1]],
                            explosion_info.get_size(), self.pos, explosion_info.get_size())
        else:  
            canvas.draw_image(self.image, self.image_center, 
                            self.image_size, self.pos, 
                            self.image_size, self.angle)
    
    def update(self):
        # update pos
        self.pos[0] = (self.pos[0] + self.vel[0]) % WIDTH
        self.pos[1] = (self.pos[1] + self.vel[1]) % HEIGHT
        self.age += 1          
        # update angle angle will be between 0 - 2pie
        self.angle += self.angle_vel
        # self.angle = (self.angle + self.angle_vel) % (2*math.pi)
        #print "Lifespan = "+str(self.lifespan), " Age = " +str(self.age)
        if self.age >= self.lifespan:
            return True
        return False
        
    def collide(self,other_obj):
        distance = dist(self.pos, other_obj.get_position())
        if distance > (self.radius + other_obj.get_radius()):
            return False
        return True      
        
    def get_radius(self):
        return self.radius
    
    def get_position(self):
        return self.pos
    
def process_sprite_group(canvas, group_set, missile_group, explosion_group):
    group_set_copy = set(group_set)
    for a_rock in group_set_copy:
        if a_rock.update():
            group_set.remove(a_rock)
        else:
            a_rock.draw(canvas)
    missile_group_copy = set(missile_group)
    for a_missile in missile_group_copy:
        if a_missile.update():
            missile_group.remove(a_missile)
        else: 
            a_missile.draw(canvas)
            
    explosion_group_copy = set(explosion_group)
    for a_explosion in explosion_group_copy:
        if a_explosion.update():
             explosion_group.remove(a_explosion)
        else: 
            a_explosion.draw(canvas)
        
def group_collide(group_set, other_obj): 
    global explosion_group 
    group_set_copy = set(group_set)
    collision_happens = False
    for rock in group_set_copy:
        # r1,r2,r3
        if rock.collide(other_obj):
            explosion = Sprite(other_obj.get_position(),[0,0],0,0,explosion_image, explosion_info, sound = explosion_sound)
            explosion_group.add(explosion)
            group_set.remove(rock)
            return True
    return False

def group_group_collide(rock_group, missile_group): 
    collision_count = 0
    rock_group_copy = set(rock_group)
    #collision_happens = False
    for rock in rock_group_copy:
        # r1,r2,r3
        if group_collide(missile_group, rock):
            rock_group.discard(rock)
            collision_count += 1         
    return collision_count


def click(pos):
    global started, lives, score, soundtrack
    center = [WIDTH / 2, HEIGHT / 2]
    size = splash_info.get_size()
    inwidth = (center[0] - size[0] / 2) < pos[0] < (center[0] + size[0] / 2)
    inheight = (center[1] - size[1] / 2) < pos[1] < (center[1] + size[1] / 2)
    if (not started) and inwidth and inheight:
        started = True
        time = 0
        score = 0
        lives = 3
        soundtrack.rewind()
        soundtrack.play()
    
def draw(canvas):
    global time, rock_group, my_ship, lives, score, missile_group, started
    
    # animiate background
    time += 1
    wtime = (time / 4) % WIDTH
    center = debris_info.get_center()
    size = debris_info.get_size()
    canvas.draw_image(nebula_image, nebula_info.get_center(), nebula_info.get_size(), [WIDTH / 2, HEIGHT / 2], [WIDTH, HEIGHT])
    canvas.draw_image(debris_image, center, size, (wtime - WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))
    canvas.draw_image(debris_image, center, size, (wtime + WIDTH / 2, HEIGHT / 2), (WIDTH, HEIGHT))

    # draw ship and sprites
    my_ship.draw(canvas)

    process_sprite_group(canvas, rock_group, missile_group, explosion_group)
    collision_count = group_group_collide(rock_group, missile_group)
    score = score + collision_count
    
    # update ship and sprites
    my_ship.update()
    if group_collide(rock_group, my_ship):
        lives = lives -1
    if lives <= 0:
        started = False
        rock_group = set()
    lives_text = "Lives:" +str(lives)
    canvas.draw_text(lives_text, [WIDTH-20*4, 20], 20, 'White')
    score_text = "Score:" +str(score)
    canvas.draw_text(score_text, [20, 20], 20, 'White')
    
    if not started:
        canvas.draw_image(splash_image, splash_info.get_center(), 
                          splash_info.get_size(), [WIDTH / 2, HEIGHT / 2], 
                          splash_info.get_size())
    
        
            
# timer handler that spawns a rock    
def rock_spawner():
    global rock_group, ROCK_NUMBER
    position = [random.randint(0,WIDTH), random.randint(0,HEIGHT)]

    # random choice for direction and 
    # then random velocity from .1 to .5
    angular_velocity = (random.choice([1, -1]) * 
                       random.randint(10, 20)/float(100)) 
    velocity = [random.choice([1, -1]) * (random.randint(1,30)/float(10)),
                random.choice([1, -1]) * (random.randint(1,30)/float(10)) ]
    angle = degree_to_radians(random.randint(0, 180))
    a_rock = Sprite(position,velocity,angle, angular_velocity, asteroid_image, asteroid_info)
    distance = dist(my_ship.get_position(), a_rock.get_position())
    ship_dist = distance > 2*(my_ship.get_radius() + a_rock.get_radius())
    if len(rock_group) < ROCK_NUMBER and started and ship_dist:
        rock_group.add(a_rock)
        
        

def keydown(key):
    global my_ship
    if simplegui.KEY_MAP["up"] == key:
        my_ship.set_thrust(True)
    if simplegui.KEY_MAP["space"] == key:
        my_ship.shoot()
    elif simplegui.KEY_MAP["left"] == key:
        my_ship.set_angular_velocity(-ANGULAR_VELOCITY_CONST)
    elif simplegui.KEY_MAP["right"] == key:
        my_ship.set_angular_velocity(ANGULAR_VELOCITY_CONST)

def keyup(key):
    global my_ship
    if simplegui.KEY_MAP["up"] == key:
        my_ship.set_thrust(False)
    elif simplegui.KEY_MAP["left"] == key:
        my_ship.set_angular_velocity(ANGULAR_VELOCITY_CONST)
    elif simplegui.KEY_MAP["right"] == key:
        my_ship.set_angular_velocity(-ANGULAR_VELOCITY_CONST)


# initialize frame
frame = simplegui.create_frame("Asteroids", WIDTH, HEIGHT)

# initialize ship and two sprites
my_ship = Ship([WIDTH / 2, HEIGHT / 2], 
               [0, 0], 0, ship_image, ship_info)

rock_group = set()
# = Sprite([2 * WIDTH / 3, 2 * HEIGHT / 3], [0,0], 0, 0, missile_image, missile_info, missile_sound)

missile_group = set()
explosion_group = set()

# register handlers
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.set_mouseclick_handler(click)

timer = simplegui.create_timer(1000.0, rock_spawner)

# get things rolling
timer.start()
frame.start()
