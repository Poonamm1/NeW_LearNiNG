# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = "Hit or stand?"
score = 0
busted = False
result = ""
total_game = 0

# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos,hidden):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        if hidden:
            canvas.draw_image(card_back,(CARD_CENTER[0], 
                    CARD_CENTER[1] ), CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        else:
            canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
        
# define hand class
class Hand:
    def __init__(self):
        # create Hand object
        self.hand = []
        self.hide_card = False

    def __str__(self):
        # return a string representation of a hand
        s = "Hand Contains"
        for i in self.hand:
            s = s + " "+str(i)
        return s

    def add_card(self, card):
        # add a card object to a hand
        self.hand.append(card)

    def get_value(self):
        value = 0
        ace_present = False
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        for card in self.hand:
            rank = card.get_rank()
            if rank == 'A':
                ace_present = True
            value += VALUES[rank]
        if value +10 <= 21 and ace_present:
            value = value + 10
            
        return value
    
    def set_hide_first_card(self, hide_card):
        self.hide_card = hide_card
        
    def draw(self, canvas, pos):
        # draw a hand on the canvas, use the draw method for cards
        i = 0
        for card in self.hand:
            card_pos = [pos[0]+i*CARD_SIZE[0], pos[1]]
            if i == 0 and self.hide_card:
                card.draw(canvas,card_pos,True)
            else: 
                card.draw(canvas,card_pos,False)
            i+=1
            
     
# define deck class 
class Deck:
    def __init__(self):
        # create a Deck object
        self.deck = []
        for suit in SUITS:
            for rank in RANKS:
                  self.deck.append(Card(suit,rank))

    def shuffle(self):
        # shuffle the deck 
        # use random.shuffle()
        random.shuffle(self.deck)

    def deal_card(self):
        # deal a card object from the deck
        return self.deck.pop(0)
    
    def __str__(self):
        # return a string representing the deck
        s = "Deck Contains"
        for i in self.deck:
            s = s + " " + str(i)
        return s

#define event handlers for buttons
def deal():
    global outcome, in_play, deck, score,dealer ,total_game
    global player,busted, result
    outcome = "Hit or stand?"
    result = ""
    if in_play and not busted:
        score = score - 1 
    busted = False
    in_play = False
    # your code goes here
    deck = Deck()
    deck.shuffle()
    
    total_game = total_game + 1
    dealer = Hand()
    player = Hand()
    
    dealer.set_hide_first_card(True)
    
    dealer.add_card(deck.deal_card())
    player.add_card(deck.deal_card())
    dealer.add_card(deck.deal_card())
    player.add_card(deck.deal_card())
    
    in_play = True

def hit():
    # replace with your code below
    global player , in_play,deck, busted, outcome ,result,dealer,score
    if not in_play or busted:
        return
    # if the hand is in play, hit the player
    card = deck.deal_card()
    player.add_card(card)
    # if busted, assign a message to outcome, update in_play and score
    if player.get_value() > 21:
        busted = True
        outcome = "New deal?"
        result = "You have busted"
        score = score - 1
        dealer.set_hide_first_card(False)

def stand():
    # replace with your code below
    global in_play, busted, outcome, score 
    global dealer, player, deck, result
    if not in_play or busted:
        return
    # if hand is in play, repeatedly hit dealer until his hand has value 17 or more
    while dealer.get_value() < 17:
        card = deck.deal_card()
        dealer.add_card(card)
    if dealer.get_value() > 21:
        result = "Dealer have busted"
        score = score + 1     
        dealer.set_hide_first_card(False)
        outcome = "New deal?"
        busted = True
        return
    # assign a message to outcome, update in_play and score
    if dealer.get_value() >= player.get_value():
        result = "Dealer wins."
        score = score - 1
    else:
        result = "You wins."
        score = score + 1
    in_play = False
    outcome = "New deal?"
    dealer.set_hide_first_card(False)

# draw handler    
def draw(canvas):
    global in_play,outcome,score,result,total_game
    canvas.draw_text("Black Jack", [250, 50], 20, 'Red')
    score_text = "Score : " + str(score)+ "/" + str(total_game)
    canvas.draw_text(score_text, [400, 80], 20, 'Red')
    global player, dealer
    #dealer canvas
    canvas.draw_text('Dealer hand', [30, 100], 20, 'Red')
    dealer.draw(canvas, [30, 120])
    canvas.draw_text(result, [250, 250], 20, 'Yellow')
    # player canvas
    canvas.draw_text('Player hand '+outcome, [30, 300], 20, 'Red')
    player.draw(canvas, [30, 320])
    
# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Blue")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
